type User @entity {
  id: ID!
  address: Bytes
  firstInteractionTimestamp: BigInt
  tokens: [UserToken]! @derivedFrom(field: "user")
}

type UserToken @entity {
  id: ID!
  user: User
  token: Token
  balance: BigInt # This is the balance of the idle token, NOT UNDERLYING BALANCE
  totalProfitRedeemed: BigInt
  totalFeePaidInUnderlying: BigInt
}

type Token @entity {
  id: ID!
  address: Bytes
  name: String
  decimals: BigInt
  
  underlyingTokenAddress: Bytes
  underlyingTokenName: String
  underlyingTokenDecimals: BigInt
  
  lastPrice: BigInt!
  lastPriceTimestamp: BigInt

  totalSupply: BigInt
  uniqueUserCount: BigInt

  fee: BigInt!
  totalFeeGeneratedInUnderlying: BigInt
  totalFeePaidInUnderlying: BigInt
}

type Redeem @entity {
  id: ID!
  tx: Bytes
  token: Token
  user: User
  amount: BigInt
  blockHeight: BigInt
  feeInUnderlying: BigInt
}

type Transfer @entity {
  id: ID!
  tx: Bytes
  token: Token
  userFrom: User
  userTo: User
  amount: BigInt
  blockHeight: BigInt
}

type Mint @entity {
  id: ID!
  tx: Bytes
  token: Token
  user: User
  amount: BigInt
  blockHeight: BigInt
}

type Referrer @entity {
  id: ID!
  address: Bytes
  totalReferralCount: BigInt
  tokens: [ReferrerToken]! @derivedFrom(field: "referrer")
}

type ReferrerToken @entity {
  id: ID!
  referrer: Referrer
  token: Token
  referralCount: BigInt
  referralTotal: BigInt
}